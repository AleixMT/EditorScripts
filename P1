#!/usr/bin/env python
# -*- coding: utf-8 -*-
import tkMessageBox # Per a mostrar els dialegs
from Tkinter import *
import tkFileDialog
import ScrolledText as tkst
import os 	#Importem el modul del sistema per a utilitzar comandes de la shell
#MAIN
#Paràmetres de finestra principal
mainw=Tk()
mainw.title("Execució d'Scripts en el temps")

#Var
global carregat		#Exportem a global
carregat=0			#Buleà per a saber ssi hem carregat fitxer
#Elements main window
#{
f1=Frame(mainw, bg="grey")	#Creem primer frame, li donem el color gris
f1.pack(fill=X, side=TOP)	#aliniem a la part de dalt i li permetem expandir-se en X

def EscullDirectori():
	global directori
	directori=tkFileDialog.askdirectory(
		parent=mainw,	# Fa que la nova finestra sigui pare de la finestra principal 
		title="Escollir directori", #Títol de la finestra
		mustexist=TRUE )	#El directori ha d'existir
	l1.configure(text=directori)

b1=Button(f1,text='Escollir directori de treball',command=EscullDirectori)	#Creem el botó i li assignem la comanda de preguntar el directori
b1.pack(side=LEFT)	 #l'apilem a l'esquerra

l1=Label(f1,text="")	#"label" que mostra el directori actual
l1.pack(expand=TRUE, fill=X, side=RIGHT, anchor=W)	#Li permeten exapndre's al llarg de la finestra en X, l'apilem a la dreta 
#}
f2=Frame(mainw) #Creem primer frame,
f2.pack(side=TOP, fill=X) #aliniem a la part de dalt i li permetem expandir-se
#{
#Funció Obrir Script:
# S'encarrega d'obrir l'Script a partir del nom (Entry e1) 
# i de la ruta escollida (Label l1) 
# i mostrar el contingut en el ScrolledText st
# Cal implementar el cas de que el fitxer no existeixi o no tingui l'extensió sh
# Cal implementar algun tipus de comunicació (variable global) per a que guardar Script sàpiga
# Si pot executar-se o no. (si hem obert algun script amb anterioritat)
def ObrirScript():
	global file 		# Fem la variable fitxer global
	file=tkFileDialog.askopenfile(mode='a+', title="Obrir fitxer", filetypes=[("Fitxers d'Scripts Bash", "*.sh")])
	try:
		global carregat		# Creen la variable buleana carregat i la fem global (comunicació)
		global content		# Globalitzem la variable per a ser disponible al main
		content=file.read()	# Llegim tot el fitxer i l'emmagatzemem
		st.delete(1.0,END)	# Fem un clean del text
		st.insert(END, content)	# Insertem el contingut del fitxer
		carregat = 1 			#Indiquem que hem carregat un fitxer
	except IOError:
		tkMessageBox.showerror(title="Error I/O", message="El fitxer indicat no existeix")	# Si captem una excepció (que el fitxer no existeixi) mostrem el missatge

b2=Button(f2, text="Obrir Script", command=ObrirScript) #botó per a obrir script
b2.pack(side=LEFT) #l'apilem a l'esquerra

e1=Entry(f2,width=20)	#entrada de text per a posar el nom del fitxer
e1.pack(expand=TRUE, fill=X, side=LEFT)	# li permetem expandir-se en X i l'apilem a l'esquerra
# Funció Guardar Script
# S'encarrega d'agafar el contingut del ScrolledText st i passar-lo al fitxer que ja ha sigut obert obert
# Per a executar-se un fitxer ha hagut de ser obert prèviament
def GuardarScript():
	if carregat==1:
		file.truncate(0)		#Netegem el fitxer
		deb=st.get(1.0, END)
		file.write(deb)
	else:
		tkMessageBox.showerror(title="Error I/O", message="Per a guardar cal carregar un fitxer abans")	# Si captem una excepció (que el fitxer no existeixi) mostrem el missatge


b3=Button(f2, text="Guardar l'Script", command=GuardarScript) # Botó per a dur a terme la funció de guardat
b3.pack(side=RIGHT)	#L'apilem a la dreta

#Genera un nou script amb el nom indicat a l'Entry e1 en el directori que indica label l1
#Cal fer dues excepcions si no hi han valors o bé el string de nom de fitxer es incorrecte
def GuardarNouScript():
	print cosas

b4=Button(mainw, text="Guardar en un nou script", command=GuardarNouScript)	#Botó per a generar la funció de dalt
b4.pack(side=TOP, anchor=W) #l'apilem a la part de dalt del frame on ens trobem
#}
#{
# Es una de les components principal del programa.
# Esta fet de tres objectes, un TextBox, un ScrollBar i un frame que els conté
# D'aquesta manera es com si fos un pack ja implementat amb el seus propis métodes
st=tkst.ScrolledText(
    master = mainw,	  # incloem a la finestra principal aquest objecte
    wrap   = 'word',  # Fem que el text sigui de paraules (?)
    width  = 25,      # carácters per fila
    height = 17,      # linies de text
    bg='beige'        # color de fons
)
st.pack(expand=TRUE, fill=BOTH, side=TOP, padx=8, pady=8)	#Apilem i permetem l'expansió. Els altres valors son la mida del text (?)
#}
#{
f3=Frame(mainw) #tercer frame
f3.pack(side=TOP, fill=X)	# procedim igual que els anteriors

l2=Label(f3, text="Arguments d'entrada :") # creem el label que indica els arguments d'entrada.
l2.pack(side=LEFT) 	# apilem a l'esquerra

e2=Entry(f3)	# entrada de text per als arguments
e2.pack(expand=TRUE, fill=X, side=LEFT) # l'apilem i li permeten fer-se gran

# Permet redireccionar la sortida de l'execució de l’script a un fitxer.
# El nom d’aquest fitxer serà en nom de l’script amb extensió «.out»
# Sera consultat per tots els botons run
cb1=Checkbutton(f3, text="Genera Stdout")	# checkbox per a saber si cal generar stdout en un fitxer
cb1.pack(side=LEFT)

# Permet redireccionar la sortida d’error de l'execució de l’script a un
# fitxer. El nom d’aquest fitxer serà en nom de l’script amb extensió «.err»
# Sera consultat per tots els botons run

cb2=Checkbutton(f3, text="Genera Stderr") 	# checkbox per a saber si cal generar stderr en un fitxer
cb2.pack(side=LEFT)
#}
#{
f4=Frame(mainw)	# afegim un nou frame
f4.pack(side=TOP, fill=X)	# l'apilem cap a dalt i emplenem en X

# Crea una subfinestra per a visualitzar si existeix la sortida de la
# darrera execució de l’script.
def VeureStderr():
	print "Falta la funció VeureStderr"

b5=Button(f4, text="Veure Stderr", command=VeureStderr) 	# Botó que executa la funció de dalt
b5.pack(side=RIGHT)		# Ho apilem a la part dreta

# Crea una subfinestra per a visualitzar si existeix la sortida de la
# darrera execució de l’script.
def VeureStdout():
	print "Falta la funció VeureStout"

b6=Button(f4, text="Veure Stdout", command=VeureStdout) # Botó que executa la funció de dalt.
b6.pack(side=RIGHT) # Apilem a la dreta
#}
#{
f5=Frame(mainw)	# Afegim un nou frame
f5.pack(side=TOP, fill=X) #apilem a dalt i permetem l'expansió
# Executa l’script escollit amb els arguments i redireccions
# indicades de manera immediata.
def RunNow():
	s=st.get(1.0, END)
	f=open('/tmp/tmp.sh','w')
	f.write(s)
	os.system("chmod +x /tmp/tmp.sh")
	os.system("/tmp/tmp.sh")

b5=Button(f5, text="Run", command=RunNow)	#Executa la funció de dalt
b5.pack(side=RIGHT)		# apilem a la dreta

l3=Label(f5, text="Executa immediatament")	# label de descripció del botó b5
l3.pack(side=RIGHT)
#}
#{
f6=Frame(mainw)	#Afegim un nou frame. Aquest frame implementa tot el relacionat amb executar a n determinat temps
f6.pack(side=TOP, fill=X)	# apilem a dalt i permetem l'expansió X
# Programa l’execució de l’script mitjançant la comanda «at» a una
# hora i minut determinats. Caldrà buscar informació sobre la comanda
# Obtenim el temps en el format HH:MM -> e4:e3
def RunLate():
	print "Falta la funció RunLate"

b6=Button(f6, text="Run", command=RunLate)	#Executa la funció de dalt
b6.pack(side=RIGHT)	# Apilem a la dreta

l4=Label(f6, text="  HH:MM  ") # label de text
l4.pack(side=RIGHT) # Apilem a la dreta

e3=Entry(f6, width=3) # entrada de text per als minuts de la funció run late
e3.pack(side=RIGHT) # Apilem a la dreta

l5=Label(f6, text=":") # label de més text
l5.pack(side=RIGHT) # Apilem a la dreta

e4=Entry(f6, width=3) # entrada de text per a les hores de la funció run late
e4.pack(side=RIGHT) # Apilem a la dreta

l6=Label(f6, text="Executa un cop a les ")	# label
l6.pack(side=RIGHT) # Apilem a la dreta
#}	
#{
f7=Frame(mainw)		# Afegim un frame. Aquest contindrà els botons per a executar l'script periodicament
f7.pack(side=TOP, fill=X)	# ho posem a la paret nort i expandim en x

# Programa de manera periòdica l'execució de l’script a una hora
# i minut de cada dia. Fer servir la comanda «crontab». S’ha de vigilar que no es
# desprogramin d’altres scripts anteriors.
# Obté l'hora de e6:e5 en format HH:MM
def RunPeriod():
	print "Falta la funció RunPeriod"

b7=Button(f7, text="Run", command=RunPeriod)	# Botó per a executar la funció anterior
b7.pack(side=RIGHT) # Apilem a la dreta

l7=Label(f7, text="  HH:MM  ")	# label de text informatiu
l7.pack(side=RIGHT) # Apilem a la dreta

e5=Entry(f7, width=3) # entrada de text que correspon als minuts
e5.pack(side=RIGHT) # Apilem a la dreta

l8=Label(f7, text=":") # label de text informatiu
l8.pack(side=RIGHT) # Apilem a la dreta

e6=Entry(f7, width=3) # entrada de text que correspon a les hores
e6.pack(side=RIGHT) # Apilem a la dreta

l9=Label(f7, text="Programa cada dia a les ") # label de text informatiu
l9.pack(side=RIGHT) # Apilem a la dreta
#}
#{
f8=Frame(mainw)		# frame per al botó de sortida
f8.pack(side=TOP, fill=X) # Apilem a la esquerra i permetem l'expansió X

def Sortir():
	file.close()
	mainw.quit

b8=Button(f8, text="Sortir", command=Sortir)	# Si apretem aquest botó tanquem la finestra
b8.pack(side=LEFT) # Apilem a la esquerra

mainw.mainloop()
